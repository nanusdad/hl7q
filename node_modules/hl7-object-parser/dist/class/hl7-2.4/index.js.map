{"version":3,"sources":["class/hl7-2.4/index.js"],"names":["hl7","message","config","hl7Parser","Parser","parse","_message","_config","obj","segment","mapping","s","toUpperCase","header","getSegment","values","value","field","Object","index1","component","index2","getField","includes","split","array","v","push","output","_generateObject","getComponent","property","paths","i","tmp","length","assign"],"mappings":"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","file":"index.js","sourcesContent":["import simpleHL7 from 'simple-hl7'\n\nexport default class hl7 {\n\n  constructor(message, config) {\n    const hl7Parser = new simpleHL7.Parser()\n    message = hl7Parser.parse(message)\n    this._message = message\n    this._config = config\n  }\n\n  /**\n   * @description Convert from config mapping file hl7 to object\n   * @return {{}}\n   */\n  process() {\n    let obj = {}\n    for (let segment in this._config.mapping) {\n      let s = (segment.toUpperCase() === 'MSH') ? this._message.header : this._message.getSegment(segment.toUpperCase())\n      for (let value of this._config.mapping[segment].values) {\n        if (value.field && s instanceof Object) {\n          let index1 = value.component[0]\n          let index2 = value.component[1]\n\n          if (s.getField(index1).includes('~')) {\n            let split = s.getField(index1).split('~')\n            let array = []\n            for (let v of split) {\n              array.push(v.split('^'))\n            }\n\n            let output = []\n            for (let v in array) {\n              (array[v][value.component[1] - 1]) ? output.push(array[v][value.component[1] - 1]) : output.push('')\n            }\n            this._generateObject(obj, value.field, output)\n          } else {\n            this._generateObject(obj, value.field, s.getComponent(index1, index2))\n          }\n        }\n      }\n    }\n    return obj\n  }\n\n  /**\n   * @description Add attribute(s) into existing object\n   * @param obj\n   * @param property\n   * @param value\n   * @private\n   */\n  _generateObject(obj, property, value) {\n    let paths = property.split('.')\n    let i = 0\n    let tmp = obj\n    for (; i < paths.length - 1; i++) {\n      tmp = (tmp[paths[i]]) ? Object.assign(tmp[paths[i]], tmp[paths[i]]) : tmp[paths[i]] = {}\n    }\n    tmp[paths[i]] = value\n  }\n\n}\n"],"sourceRoot":"/Users/dimitri/repositories/hl7-object-parser/src"}